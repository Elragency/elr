import fs from "fs";
import path from "path";
import slash from "slash";
const getConfigAlias = (paths, baseUrl) => {
  const aliases = [];
  for (const [alias, values] of Object.entries(paths)) {
    const find = new RegExp(
      `^${[...alias].map(
        (segment) => segment === "*" ? "(.+)" : segment.replace(/[\\^$*+?.()|[\]{}]/, "\\$&")
      ).join("")}$`
    );
    let matchId = 0;
    for (const value of values) {
      const replacement = [...path.posix.resolve(baseUrl, value)].map((segment) => segment === "*" ? `$${++matchId}` : segment === "$" ? "$$" : segment).join("");
      aliases.push({ find, replacement });
    }
  }
  return aliases;
};
function configAliasVitePlugin({
  settings
}) {
  const { tsConfig, tsConfigPath } = settings;
  if (!tsConfig || !tsConfigPath || !tsConfig.compilerOptions)
    return null;
  const { baseUrl, paths } = tsConfig.compilerOptions;
  if (!baseUrl || !paths)
    return null;
  const resolvedBaseUrl = path.posix.resolve(
    path.posix.dirname(slash(tsConfigPath).replace(/^\/?/, "/")),
    slash(baseUrl)
  );
  const configAlias = getConfigAlias(paths, resolvedBaseUrl);
  return {
    name: "astro:tsconfig-alias",
    enforce: "pre",
    config() {
      if (configAlias.length) {
        return {
          resolve: {
            alias: configAlias
          }
        };
      }
    },
    resolveId(id) {
      if (id.startsWith(".") || id.startsWith("/"))
        return;
      const resolved = path.posix.join(resolvedBaseUrl, id);
      if (fs.existsSync(resolved)) {
        return resolved;
      }
    }
  };
}
export {
  configAliasVitePlugin as default
};
